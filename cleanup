#!/usr/bin/env bash

#=========================================================================
#
#  Description:
#  -----------
#
#  Script to remove files (usually trace/audit) older then ${keep_days} value.
#
#  Usage examples:
#  ---------------
#
#  1) Interactively:
#              
#     $ /home/oracle/dba/scripts/cleanup.sh
#
#  2) Background:
#
#     $ nohup /home/oracle/dba/scripts/cleanup.sh > /home/oracle/dba/logs/cleanup.log 2>&1 &
#
#  Modifications:
#  --------------
#
#  Name:         Date:       Version:    Comment:
#  ============= =========== =========== ================
#  G.Glybin      13/11/2018  1.0         Initial Version
#
#=========================================================================

set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace

#------------------------
# Variables
#

readonly exec_dir="$(cd "$(dirname "${0}")" && pwd)"  # Script directory full path
readonly exec_name="$(basename "${0}")"               # Script file name
files_top="/home/oracle/dba/scripts/trace_test"       # Files location
file_mask=('*.trc' '*.trm')                           # Mask of files to remove.
keep_days=14

#------------------------
# Functions
#

message() {

echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

check_running() {

pids=($(ps aux | grep "${exec_name}" | grep -v "grep" | awk {'print$2'}))
for pid in "${pids}"; do
  if [[ "${pid}" -ne $$ ]]; then
    message "Script already running."
    exit 1
  fi
done
}

check_files_top() {

if [[ ! -d "${files_top}" ]]; then
  message "Directory \""${files_top}"\" doesn't exist."
  exit 1
fi
}

cleanup() {

count_masks="${#file_mask[@]}"
for ((cur_mask = 0; cur_mask <= count_masks - 1; cur_mask++)); do
  message "Starting removal of \""${file_mask[cur_mask]}"\" files under \""${files_top}"\" directory ..."
  find ${files_top} -name "${file_mask[cur_mask]}" -type f -mtime +${keep_days} -exec rm -f {} \;
  message "Done."
done
}

#------------------------
# Main
#

check_running
check_files_top
cleanup
